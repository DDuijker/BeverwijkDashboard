Before you start:
1. have python 3.11 installed
2. have django installed => pip install django
3. have bootstrap5 installed => pip install django-bootstrap5
4. have bootstrap-v5 installed => pip install django-bootstrap-v5
5. have django_enumfield installed => pip install django_enumfield
6. have matplotlib installed => pip install matplotlib
7. make sure you have a venv installed and run the application from the venv => cd .\venv\ => Scripts/activate
8. have whitenoise installed => pip install whitenoise
9. have requests installed => pip install requests



How to start the application:
1. run command 'py manage.py runserver' in the root directory (that contains the manage.py file)

Migrate
1. In the root directory open the directory in a terminal:
    => open in => terminal
2. These are the commands to run. In this order!
    python manage.py makemigrations (name of app (MaasApp))
    python manage.py migrate
- do this if you changed the models

Query database Console
1. In the root directory run 'py manage.py shell'
2. From MaasApp.models import User
3. User.objects.all()
4. User.objects.all().values()

Create Superuser
1. In the upper directory (BeverwijkDashboard) that contains the manage.py file, open the directory in a terminal:
    => open in => terminal
2. Run this command:
    python manage.py createsuperuser
3. Fill in the required fields

Git Branches
1. To list all branches in your Git repository, you can use the git branch command.
    The current branch you are on will be marked with an asterisk (*).

Enter database
1. use DB Browser for SQLite (external application)
OR
1. 'py manage.py shell'
2. from MaasApp.models import ... (User)
3. User.object.all() of ...all().values()
4. User 1 >>> x = User.object.all()[0]

Change Password
1. save user object like above
2. from django.contrib.auth.hashers import make_password
3. x.password = make_password("...")
4. x.save()
5. x.password prints the current hashed password

Create View
1. in the templates, create your HTML file
2. in views.py add a function that returns the template
3. in the urls.py of MaasApp, add a path with the function from views

Include model in admin interface
1. go to admin.py
2. admin.site.register([Name of model])
